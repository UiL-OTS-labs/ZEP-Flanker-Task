/******************************************************************************\
FILE:           practice_block.zm
AUTHOR:         Chris van Run <C.P.A.vanRun@uu.nl>
ADAPTED BY:     -

DESCRIPTION: Contains the test_block

HISTORY:
2014-11-03 CvR   Created.

\******************************************************************************/


Block test_block
{
    int block_nr;

	on_event:exit()
        {
            // Save test output table as CSV file.
            test_output_save_and_clear(test_output, ": Test results :", 1);
        }

     Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block test
    {
        TestItem[..] test_items;

        on_event:entry()
        {
            test_page.hide_cursor();

            num_cycles = test_items.size;

            test_page.setup();
        }

        on_event:exit()
        {
            test_page.show_cursor();
            test_page.cleanup();
        }

        Trial stimulus
        {
            TestItem item;

            on_event:entry()
            {
                item = test_items[test.cycle];
                test_page.action(this, item, now());

                // debug line:
                // println("Present: " + test_block.cycle + " " + item.id);
                // signal(this,CONTINUE);
            }

            on_event:exit()
            {
                //generate and save output.
                TestOutput output;
                output.block_nr = test_block.block_nr;
                output.trial_nr = test.cycle+1;
                output.id = item.id;
                output.inter_stimulus_interval = item.isi;
                output.congruence = item.flankers;
                output.rt = test_page.response.rt;
                output.selected_side = item.side;
                output.expected_side = test_page.response.value;
                output.correct = test_page.response.correct;
                test_output_append(test_output, output);
            }
        }
    }

	 Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

     Part pause
    {
        bool have_pause;
        on_event:entry()
        {
            if(have_pause)
            {
                //pause_page.set_text_size(1000, 600);
                pause_page.set_text(PAUSE_TEXT, true);
                pause_page.action_non_respond(this, 2s);
            }
            else
                signal(this, CONTINUE);
        }

        on_event:exit()
        {
            pause_page.cleanup();
		}
    }
}

void action(Part caller, TestItem[] test_items_in, int block_nr_in, bool pause = true)
{
    test_block.block_nr = block_nr_in;
    test_block.pause.have_pause = pause;

    test_block.test.test_items.size = test_items_in.size;

    int index = 0;
    while(index < test_items_in.size)
    {
        test_block.test.test_items[index] = test_items_in[index];
        index++;
    }
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    test_block.enter(caller);
}
