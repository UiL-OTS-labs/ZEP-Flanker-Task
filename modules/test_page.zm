/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2011-10-25 TV   Created.
2014-11-03 CvR  Adjusted.

\******************************************************************************/


Page test_page
{
    TestItem    item;           // trial control parameters
    dur surplus_duration;           // how much time is left in trial after inter-stimulus interval and fixation cross

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    on_event:key_press()
    {
        // Handle left-shift (no) and right-shift (yes).
        if (input_key == KEY_Shift_L)
            response.process_hit(LEFT, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(RIGHT, event_time);
        else if (input_key == KEY_Escape)
            done(CONTINUE);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        if(message_arg == 0)
            response.process_hit(LEFT, event_time);
        else if(message_arg == 1)
            response.process_hit(RIGHT, event_time);
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        CanvasGadget canvas
        {
            init()
            {
                size = 500, 500;
                offset_x = width / 2;
                offset_y = height / 2;
            }


            CrossShape fixation
            {
                init()
                {
                    radius = FIXATION_CROSS_SIZE;
                    line_width = FIXATION_CROSS_WIDTH;
                    line_pattern_color = color:crimson;
                }
            }


            ImageShape stimulus
            {
                void setup(string image_filename)
                {
                    image = image_filename;
                    width = IMAGE_WIDTH;
                    height = round((width/image_width)*image_height);
                    offset_x = round(-width / 2);
                    offset_y = round(-height / 2);
                }
            }
        }

        time start_stimulus(time t)
        {
            // Prepare stimulus presentation object.
            // canvas.stimulus.text = item.word;

            // Start fixation cross.
            canvas.fixation.start(t, FIXATION_CROSS_DURATION);
            time fixoffset = canvas.fixation.expected_finish_time;

            canvas.stimulus.setup(stimuli_dir() + "/images/" + item.filename);

            // Start stimulus at fixation offset.
            canvas.stimulus.start(fixoffset+BLANK_AFTER_FIXATION);

            // Return stimulus onset time.
            return canvas.stimulus.expected_start_time;
        }

        void stop_stimulus()
        {
            canvas.stimulus.stop(now());
        }


        void reset()
        {
            full_abort();

            canvas.stimulus.is_visible = false;
        }
    }


    Response response
    {
        // Response data.
        DirectionType     value;          // response value: 0=no, 1=yes, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            value = NONE;
            rt = -9999;
            correct = -1;
        }


        void process_hit(DirectionType val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the 
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));
                correct = val == item.side;

                layout.stop_stimulus();  
                ignore_remaining_hits();

                //if setup handle the feedback.
                real correctness = 0;
                if (num_valid_hits > 0) correctness = correct ? 1 : -1;

                test_page_overlay.start_feedback(this, correctness,FEEDBACK_DURATION);
                if(surplus_duration>reaction_time(0))
                    surplus_duration = surplus_duration - reaction_time(0);
                else
                    surplus_duration = 0s;
                stop(t+surplus_duration);

            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
                done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ? 
            INSTRUCTION_OVERLAY : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. no(0) and yes(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); // button 0 means left(0)
        control.button_box.enable_button(2, 1); // button 1 means right(1)
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;

        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref+dur(item.isi));

        // Reset response data.
        response.clear();


        // Start fixation symbol and stimulus.
        time stimonset = layout.start_stimulus(tref);

        surplus_duration = TRIAL_DURATION - (stimonset-tref);

        // Response interval starts at stimulus onset. Timeout after 
        // RESPONSE_DURATION unless this duration is 0s or less.
        response.start(stimonset);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.filename) + "  " +
            string(item.isi));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
