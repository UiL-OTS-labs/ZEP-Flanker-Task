/******************************************************************************\
FILE:           ????.zp
AUTHOR:         Chris van Run <C.P.A.vanRun@uu.nl>
ADAPTED BY:     -

DESCRIPTION:


HISTORY:
2014-??-?? CvR   Created.

\******************************************************************************/

requires 1.10;

//globaly used modules
import globaldefs;
import std_windows1;
import std_entry_page1;
import std_exit_page1;
import std_blank_page;

import texts_en;
import test_page;
import stimuli;
import choose_1of2_page;
import pause_page;
import picture_pause_page;

// import practice::control_block;
import test::test_block;



Experiment experiment
{
    on_event:entry()
    {
		// opens the button_box
		control.button_box.open();

    // If necessary set parallel port line D0 to power button box device.
		control.button_box.output(0x02);
		
		// Load in Stimuli
        show_test_windows();
    }


    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }

    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

	 Part
    {
        on_event:entry()
        {
            blank_page.fill_pattern_color = TEST_PAGE_COLOR;
            blank_page.action_auto(this, 500ms);
        }
    }
    
	Block main_block
  {
    on_event:entry()
    {
      // Load test items table.
      num_cycles = BLOCK_ORDER_ORDER.size;            
    }

    Part
    {
      on_event:entry()
      {
        BlockOrderType block_order_type = BLOCK_ORDER_ORDER[main_block.cycle];
        test::action(this, BLOCK_ORDER_PER_TYPE[block_order_type], block_order_type);
      }
    }

    Part
    {
        on_event:entry()
        {
          blank_page.action_auto(this, 500ms);
        }
    }

    Part block_pause 
    {
      on_event:entry()
      {
        if(main_block.cycle != main_block.num_cycles-1)
        {
          // pause_page.set_text(PAUSE2_TEXT, true);
          // pause_page.action(this, 0s, -1s, 200ms, true, 2s);
    	  println("Big_break");
          signal(this,CONTINUE);
        }
        else
          signal(this, CONTINUE);
      }
    }
  } 

        
            // BlockOrderType order_type = BLOCK_ORDER_ORDER[Current_Block];
            // int[] order = BLOCK_ORDER_PER_TYPE[order_type];

            // TestItem[..] test_items;
            // //if (load_stimuli(test_items, "prac_items.csv") != OK) terminate;

    //     on_event:exit()
    //     {
    //       Current_Block++;
    //     }
    // }
    
  //   Part
  //   {
  //       on_event:entry()
  //       {
  //           blank_page.action_auto(this, 500ms);
  //       }
  //   }
    
  //   Part phase2
  //   {
  //       on_event:entry()
  //       {
  //           test::action(this);
  //       }
  //   }
	
	 // Part
  //   {
  //       on_event:entry()
  //       {
  //           blank_page.action_auto(this, 500ms);
  //       }
  //   }
    
    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
            
            // opens the button_box
		        control.button_box.close();
        }
    }
}
